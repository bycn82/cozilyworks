
<FileDeclaration>
<PackageDeclaration>package 
<QualifiedName>com.cozilyworks.aop
</QualifiedName>;

</PackageDeclaration>
<ImportDeclaration>import  
<QualifiedName>java.lang.reflect.InvocationHandler
</QualifiedName>;

</ImportDeclaration>
<ImportDeclaration>import  
<QualifiedName>java.lang.reflect.Method
</QualifiedName>;

</ImportDeclaration>
<ImportDeclaration>import  
<QualifiedName>java.lang.reflect.Proxy
</QualifiedName>;

</ImportDeclaration>
<TypeDeclaration>
<ClassOrInterfaceDeclaration>
<ClassDeclaration>
<NormalClassDeclaration>
<Modifiers>
<Modifier>public
</Modifier> 
</Modifiers> class AOPHandler implements 
<TypeList>
<Type>
<ClassOrInterfaceType>InvocationHandler 
</ClassOrInterfaceType>
</Type>
</TypeList>
<ClassBody>{
<ClassBodyDeclaration>
<MemberDecl>
<FieldDeclaration>
<Modifiers>
<Modifier>private
</Modifier> 
</Modifiers> 
<Type>
<ClassOrInterfaceType>Object 
</ClassOrInterfaceType>
</Type> 
<VariableDeclarator>orginal
</VariableDeclarator>;

</FieldDeclaration>
</MemberDecl>
</ClassBodyDeclaration>
<ClassBodyDeclaration>
<MemberDecl>
<MethodDeclaration>
<Modifiers>
<Modifier>public
</Modifier> 
</Modifiers>  
<ReturnType>
<Type>
<ClassOrInterfaceType>Object 
</ClassOrInterfaceType>
</Type>
</ReturnType> bind 
<FormalParameters>( 
<FormalParameterDecls>
<NormalParameterDecl>[VariableModifiers] 
<Type>
<ClassOrInterfaceType>Object 
</ClassOrInterfaceType>
</Type> obj
</NormalParameterDecl>
</FormalParameterDecls> )
</FormalParameters>
<BlockOrComma>
<Block>{
<BlockStatement>
<Statement>
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>orginal
</Primary>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression> 
<AssignmentOperator>=
</AssignmentOperator> 
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>obj
</Primary>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression>  
</Expression>
</Expression> ;

</Statement>
</BlockStatement>
<BlockStatement>
<Statement>return 
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>Proxy.newProxyInstance
<IdentifierSuffix>
<Arguments>( 
<ExpressionList>
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>obj.getClass
<IdentifierSuffix>
<Arguments>(  )
</Arguments>
</IdentifierSuffix>
</Primary>
<Selector>.getClassLoader 
<Arguments>(  )
</Arguments>
</Selector>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression>  
</Expression>, 
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>obj.getClass
<IdentifierSuffix>
<Arguments>(  )
</Arguments>
</IdentifierSuffix>
</Primary>
<Selector>.getInterfaces 
<Arguments>(  )
</Arguments>
</Selector>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression>  
</Expression>, 
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>this
</Primary>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression>  
</Expression>
</ExpressionList> )
</Arguments>
</IdentifierSuffix>
</Primary>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression>  
</Expression> ;

</Statement>
</BlockStatement>}
</Block>
</BlockOrComma>
</MethodDeclaration>
</MemberDecl>
</ClassBodyDeclaration>}
</ClassBody>
</NormalClassDeclaration>
</ClassDeclaration>
</ClassOrInterfaceDeclaration>
</TypeDeclaration>
</FileDeclaration>