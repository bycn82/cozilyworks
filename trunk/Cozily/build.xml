
<FileDeclaration>
	<PackageDeclaration>package
<QualifiedName>com.cozilyworks.cozily
</QualifiedName>;

</PackageDeclaration>
	<ImportDeclaration>import
<QualifiedName>junit.framework.Test
</QualifiedName>;

</ImportDeclaration>
	<ImportDeclaration>import
<QualifiedName>junit.framework.TestSuite
</QualifiedName>;

</ImportDeclaration>
	<TypeDeclaration>
		<ClassOrInterfaceDeclaration>
			<ClassDeclaration>
				<NormalClassDeclaration>
					<Modifiers>
						<Modifier>public
</Modifier>
					</Modifiers> class AllTests
<ClassBody>{
<ClassBodyDeclaration>
							<MemberDecl>
								<MethodDeclaration>
									<Modifiers>
										<Modifier>public
</Modifier>
										<Modifier>static
</Modifier>
									</Modifiers>
									<ReturnType>
										<Type>
											<ClassOrInterfaceType>Test
</ClassOrInterfaceType>
										</Type>
									</ReturnType>
									<FormalParameters>(  )
</FormalParameters>
									<BlockOrComma>
										<Block>{[
<BlockStatement>
												<LocalVariableDeclarationStatement>
													<LocalVariableDeclaration>[]
<Type>
															<ClassOrInterfaceType>TestSuite
</ClassOrInterfaceType>
														</Type>
														<VariableDeclarator>suite=
<VariableInitializer>
																<Expression>
																	<ConditionalExpression>
																		<ConditionalOrExpression>
																			<ConditionalAndExpression>
																				<InclusiveOrExpression>
																					<ExclusiveOrExpression>
																						<AndExpression>
																							<EqualityExpression>
																								<InstanceOfExpression>
																									<RelationalExpression>
																										<ShiftExpression>
																											<AdditiveExpression>
																												<MultiplicativeExpression>
																													<UnaryExpression>
																														<UnaryExpressionNotPlusMinus>
																															<Primary>
																																<Creator>new
<ClassOrInterfaceType>TestSuite
</ClassOrInterfaceType>
																																	<ClassCreatorRest>
																																		<Arguments>(
<ExpressionList>
																																				<Expression>
																																					<ConditionalExpression>
																																						<ConditionalOrExpression>
																																							<ConditionalAndExpression>
																																								<InclusiveOrExpression>
																																									<ExclusiveOrExpression>
																																										<AndExpression>
																																											<EqualityExpression>
																																												<InstanceOfExpression>
																																													<RelationalExpression>
																																														<ShiftExpression>
																																															<AdditiveExpression>
																																																<MultiplicativeExpression>
																																																	<UnaryExpression>
																																																		<UnaryExpressionNotPlusMinus>
																																																			<Primary>
																																																				<Literal>"Test for default package"
</Literal>
																																																			</Primary>
																																																		</UnaryExpressionNotPlusMinus>
																																																	</UnaryExpression>
																																																</MultiplicativeExpression>
																																															</AdditiveExpression>
																																														</ShiftExpression>
																																													</RelationalExpression>
																																												</InstanceOfExpression>
																																											</EqualityExpression>
																																										</AndExpression>
																																									</ExclusiveOrExpression>
																																								</InclusiveOrExpression>
																																							</ConditionalAndExpression>
																																						</ConditionalOrExpression> ?  :
</ConditionalExpression>
																																				</Expression>
																																			</ExpressionList> )
</Arguments>
																																	</ClassCreatorRest>
																																</Creator>
																															</Primary>
																														</UnaryExpressionNotPlusMinus>
																													</UnaryExpression>
																												</MultiplicativeExpression>
																											</AdditiveExpression>
																										</ShiftExpression>
																									</RelationalExpression>
																								</InstanceOfExpression>
																							</EqualityExpression>
																						</AndExpression>
																					</ExclusiveOrExpression>
																				</InclusiveOrExpression>
																			</ConditionalAndExpression>
																		</ConditionalOrExpression> ?  :
</ConditionalExpression>
																</Expression>
															</VariableInitializer>
														</VariableDeclarator>
													</LocalVariableDeclaration>;

</LocalVariableDeclarationStatement>
											</BlockStatement>,
<BlockStatement>
												<Statement>
													<Expression>
														<ConditionalExpression>
															<ConditionalOrExpression>
																<ConditionalAndExpression>
																	<InclusiveOrExpression>
																		<ExclusiveOrExpression>
																			<AndExpression>
																				<EqualityExpression>
																					<InstanceOfExpression>
																						<RelationalExpression>
																							<ShiftExpression>
																								<AdditiveExpression>
																									<MultiplicativeExpression>
																										<UnaryExpression>
																											<UnaryExpressionNotPlusMinus>
																												<Primary>suite.addTestSuite
<IdentifierSuffix>
																														<Arguments>(
<ExpressionList>
																																<Expression>
																																	<ConditionalExpression>
																																		<ConditionalOrExpression>
																																			<ConditionalAndExpression>
																																				<InclusiveOrExpression>
																																					<ExclusiveOrExpression>
																																						<AndExpression>
																																							<EqualityExpression>
																																								<InstanceOfExpression>
																																									<RelationalExpression>
																																										<ShiftExpression>
																																											<AdditiveExpression>
																																												<MultiplicativeExpression>
																																													<UnaryExpression>
																																														<UnaryExpressionNotPlusMinus>
																																															<Primary>TestExpression
<IdentifierSuffix>.class
</IdentifierSuffix>
																																															</Primary>
																																														</UnaryExpressionNotPlusMinus>
																																													</UnaryExpression>
																																												</MultiplicativeExpression>
																																											</AdditiveExpression>
																																										</ShiftExpression>
																																									</RelationalExpression>
																																								</InstanceOfExpression>
																																							</EqualityExpression>
																																						</AndExpression>
																																					</ExclusiveOrExpression>
																																				</InclusiveOrExpression>
																																			</ConditionalAndExpression>
																																		</ConditionalOrExpression> ?  :
</ConditionalExpression>
																																</Expression>
																															</ExpressionList> )
</Arguments>
																													</IdentifierSuffix>
																												</Primary>
																											</UnaryExpressionNotPlusMinus>
																										</UnaryExpression>
																									</MultiplicativeExpression>
																								</AdditiveExpression>
																							</ShiftExpression>
																						</RelationalExpression>
																					</InstanceOfExpression>
																				</EqualityExpression>
																			</AndExpression>
																		</ExclusiveOrExpression>
																	</InclusiveOrExpression>
																</ConditionalAndExpression>
															</ConditionalOrExpression> ?  :
</ConditionalExpression>
													</Expression> ;

</Statement>
											</BlockStatement>,
<BlockStatement>
												<Statement>return
<Expression>
														<ConditionalExpression>
															<ConditionalOrExpression>
																<ConditionalAndExpression>
																	<InclusiveOrExpression>
																		<ExclusiveOrExpression>
																			<AndExpression>
																				<EqualityExpression>
																					<InstanceOfExpression>
																						<RelationalExpression>
																							<ShiftExpression>
																								<AdditiveExpression>
																									<MultiplicativeExpression>
																										<UnaryExpression>
																											<UnaryExpressionNotPlusMinus>
																												<Primary>suite
</Primary>
																											</UnaryExpressionNotPlusMinus>
																										</UnaryExpression>
																									</MultiplicativeExpression>
																								</AdditiveExpression>
																							</ShiftExpression>
																						</RelationalExpression>
																					</InstanceOfExpression>
																				</EqualityExpression>
																			</AndExpression>
																		</ExclusiveOrExpression>
																	</InclusiveOrExpression>
																</ConditionalAndExpression>
															</ConditionalOrExpression> ?  :
</ConditionalExpression>
													</Expression> ;

</Statement>
											</BlockStatement>]}
</Block>
									</BlockOrComma>
								</MethodDeclaration>
							</MemberDecl>
						</ClassBodyDeclaration>}
</ClassBody>
				</NormalClassDeclaration>
			</ClassDeclaration>
		</ClassOrInterfaceDeclaration>
	</TypeDeclaration>
</FileDeclaration>
