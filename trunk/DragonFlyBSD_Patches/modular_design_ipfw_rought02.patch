/*
this patch focusing on how to extend the size of the ipfw_insn structure, 
and after extended the length of the structure ,it need to caculate the len offset, and size carefully in order to store into the kernel
actually it also need to carefull for the offset, when show_ipfw(), it will get the rules and loop it again, 
define a MACRO to replace all the changes, in order to make it easy to swtich from exiting to new version
*/

diff --git a/sbin/ipfw/ipfw2.c b/sbin/ipfw/ipfw2.c
index 7027fb9..22fd97b 100644
--- a/sbin/ipfw/ipfw2.c
+++ b/sbin/ipfw/ipfw2.c
@@ -862,8 +862,15 @@ show_ipfw(struct ipfw_ioc_rule *rule, int pcwidth, int bcwidth)
 	/*
 	 * first print actions
 	 */
+	 	printf("\n=======printf action=====");
+	 	printf("\n==rule->cmd_len=%d ",rule->cmd_len);
+		printf("\n==rule->act_ofs=%d ",rule->act_ofs);
+		printf("\n==l=%d\n",rule->cmd_len - rule->act_ofs);
+
         for (l = rule->cmd_len - rule->act_ofs, cmd = ACTION_PTR(rule);
-			l > 0 ; l -= F_LEN(cmd), cmd += F_LEN(cmd)) {
+			l > 0 ; l -= F_LEN(cmd), cmd=(ipfw_insn *)((uint32_t *)cmd+ F_LEN(cmd)) ) {
+			
+		//printf("--->opcode=%d  l=%d  F_LEN(cmd)=%d\n",cmd->opcode,l,F_LEN(cmd));
 		switch(cmd->opcode) {
 		case O_CHECK_STATE:
 			printf("check-state");
@@ -926,7 +933,7 @@ show_ipfw(struct ipfw_ioc_rule *rule, int pcwidth, int bcwidth)
 			break;
 
 		default:
-			printf("** unrecognized action %d len %d",
+			printf("** unrecognized action %d len %d\n",
 				cmd->opcode, cmd->len);
 		}
 	}
@@ -947,13 +954,20 @@ show_ipfw(struct ipfw_ioc_rule *rule, int pcwidth, int bcwidth)
 		flags |= HAVE_IP | HAVE_OPTIONS;
 	}
 
+
+	printf("\n=======printf filter=====");
+	printf("\n==l=%d cmd->len=%d ",rule->act_ofs,rule->cmd->len);
+	int counter2=0;
         for (l = rule->act_ofs, cmd = rule->cmd ;
-			l > 0 ; l -= F_LEN(cmd) , cmd += F_LEN(cmd)) {
+			l > 0 && counter2 <10 ; l -= F_LEN(cmd)*2 , cmd=(ipfw_insn *)((uint32_t *)cmd+ F_LEN(cmd))) {
 		/* useful alias */
+		counter2++;
 		ipfw_insn_u32 *cmd32 = (ipfw_insn_u32 *)cmd;
 
 		show_prerequisites(&flags, 0, cmd->opcode);
 
+
+		printf("\n==>opcode=%d  l=%d F_LEN(cmd)=%d\n",cmd->opcode,l,F_LEN(cmd));
 		switch(cmd->opcode) {
 		case O_PROB:	
 			break;	/* done already */
@@ -2387,7 +2401,7 @@ static void
 fill_cmd(ipfw_insn *cmd, enum ipfw_opcodes opcode, int flags, u_int16_t arg)
 {
 	cmd->opcode = opcode;
-	cmd->len =  ((cmd->len | flags) & (F_NOT | F_OR)) | 1;
+	cmd->len =  ((cmd->len | flags) & (F_NOT | F_OR)) | LEN;
 	cmd->arg1 = arg;
 }
 
@@ -2536,6 +2550,8 @@ add(int ac, char *av[])
 	bzero(rulebuf, sizeof(rulebuf));
 
 	rule = (struct ipfw_ioc_rule *)rulebuf;
+	printf("rule=%p rule->cmd=%p\n",rule,rule->cmd);
+	printf("-->%ld \n ",((void *)rule->cmd - (void *)rule));
 	cmd = (ipfw_insn *)cmdbuf;
 	action = (ipfw_insn *)actbuf;
 
@@ -2570,7 +2586,7 @@ add(int ac, char *av[])
 	NEED1("missing action");
 	i = match_token(rule_actions, *av);
 	ac--; av++;
-	action->len = 1;	/* default */
+	action->len = LEN;	/* default */
 	switch(i) {
 	case TOK_CHECKSTATE:
 		have_state = action;
@@ -2926,6 +2942,7 @@ read_options:
 
 		case TOK_LAYER2:
 			fill_cmd(cmd, O_LAYER2, 0, 0);
+			printf("layer2 cmd->len=%d\n",cmd->len);
 			break;
 
 		case TOK_XMIT:
@@ -3188,7 +3205,7 @@ done:
 	 * and now must be moved to the top of the action part.
 	 */
 	dst = (ipfw_insn *)rule->cmd;
-
+	printf("dst v=%p\n",dst);
 	/*
 	 * First thing to write into the command stream is the match probability.
 	 */
@@ -3218,8 +3235,11 @@ done:
 		case O_LIMIT:
 			break;
 		default:
+			printf("cp cmd len=%d opcode=%d\n",i,src->opcode);
+			printf("dst v=%p\n",dst);
 			bcopy(src, dst, i * sizeof(u_int32_t));
-			dst += i;
+			dst=(ipfw_insn *)((uint32_t *)dst+ i);
+			printf("dst v=%p\n",dst);
 		}
 	}
 
@@ -3228,13 +3248,15 @@ done:
 	 */
 	if (have_state && have_state->opcode != O_CHECK_STATE) {
 		i = F_LEN(have_state);
+		printf("cp have_state %d\n",i);
 		bcopy(have_state, dst, i * sizeof(u_int32_t));
 		dst += i;
 	}
 	/*
 	 * start action section
 	 */
-	rule->act_ofs = dst - rule->cmd;
+	rule->act_ofs = (void *)dst - (void *)(rule->cmd);
+	printf("act_offset= %ld\n",(uint32_t *)dst - (uint32_t *)(rule->cmd));
 
 	/*
 	 * put back O_LOG if necessary
@@ -3242,6 +3264,7 @@ done:
 	src = (ipfw_insn *)cmdbuf;
 	if ( src->opcode == O_LOG ) {
 		i = F_LEN(src);
+		printf("cp log %d\n",i);
 		bcopy(src, dst, i * sizeof(u_int32_t));
 		dst += i;
 	}
@@ -3250,16 +3273,24 @@ done:
 	 */
 	for (src = (ipfw_insn *)actbuf; src != action; src += i) {
 		i = F_LEN(src);
+		printf("cp action len=%d opcode=%d\n",i,src->opcode);
+		printf("dst v=%p\n",dst);
 		bcopy(src, dst, i * sizeof(u_int32_t));
-		dst += i;
+		dst=(ipfw_insn *)((uint32_t *)dst+ i);
+		printf("dst v=%p\n",dst);
 	}
-
+	
 	rule->cmd_len = (u_int32_t *)dst - (u_int32_t *)(rule->cmd);
 	i = (void *)dst - (void *)rule;
+	printf("============\n");
+	printf("rule->cmd_len=%d\n",rule->cmd_len);
+	printf("i=%d\n",i);
 	if (getsockopt(s, IPPROTO_IP, IP_FW_ADD, rule, &i) == -1)
 		err(EX_UNAVAILABLE, "getsockopt(%s)", "IP_FW_ADD");
+	/*
 	if (!do_quiet)
 		show_ipfw(rule, 10, 10);
+	*/
 }
 
 static void
@@ -3624,6 +3655,9 @@ main(int ac, char *av[])
 	if (s < 0)
 		err(EX_UNAVAILABLE, "socket");
 
+
+
+
 	/*
 	 * If the last argument is an absolute pathname, interpret it
 	 * as a file to be preprocessed.
diff --git a/sys/net/ipfw/Makefile b/sys/net/ipfw/Makefile
index 62fcfb4..0216a5e 100644
--- a/sys/net/ipfw/Makefile
+++ b/sys/net/ipfw/Makefile
@@ -19,7 +19,7 @@ opt_ipfw.h:
 	#echo '#define IPFIREWALL_VERBOSE_LIMIT 100' >> ${.OBJDIR}/${.TARGET}
 	#
 	# If you want it to pass all packets by default
-	#echo '#define IPFIREWALL_DEFAULT_TO_ACCEPT 1' >> ${.OBJDIR}/${.TARGET}
+	echo '#define IPFIREWALL_DEFAULT_TO_ACCEPT 1' >> ${.OBJDIR}/${.TARGET}
 .endif
 
 .include <bsd.kmod.mk>
diff --git a/sys/net/ipfw/ip_fw2.c b/sys/net/ipfw/ip_fw2.c
index cef01d0..bcd7631 100644
--- a/sys/net/ipfw/ip_fw2.c
+++ b/sys/net/ipfw/ip_fw2.c
@@ -2666,7 +2666,7 @@ ipfw_add_rule(struct ipfw_ioc_rule *ioc_rule, uint32_t rule_flags)
 	struct netmsg_base *nmsg;
 	struct ip_fw *f, *prev, *rule;
 	struct ip_fw_stub *stub;
-
+	kprintf("ipfw_add_rule()\n");
 	IPFW_ASSERT_CFGPORT(&curthread->td_msgport);
 
 	/*
@@ -3489,12 +3489,14 @@ ipfw_check_ioc_rule(struct ipfw_ioc_rule *rule, int size, uint32_t *rule_flags)
 
 	*rule_flags = 0;
 
+	kprintf("size=%d sizeof(rule)=%lu\n",size,sizeof(*rule));
 	/* Check for valid size */
 	if (size < sizeof(*rule)) {
 		kprintf("ipfw: rule too short\n");
 		return EINVAL;
 	}
 	l = IOC_RULESIZE(rule);
+	kprintf("ioc_rulesize=%lu rule->cmd_len=%d\n",IOC_RULESIZE(rule),rule->cmd_len);
 	if (l != size) {
 		kprintf("ipfw: size mismatch (have %d want %d)\n", size, l);
 		return EINVAL;
@@ -3511,7 +3513,7 @@ ipfw_check_ioc_rule(struct ipfw_ioc_rule *rule, int size, uint32_t *rule_flags)
 	 * instruction sizes.
 	 */
 	for (l = rule->cmd_len, cmd = rule->cmd; l > 0;
-	     l -= cmdlen, cmd += cmdlen) {
+	     l -= cmdlen, cmd=(ipfw_insn *)((uint32_t *)cmd+ cmdlen)) {
 		cmdlen = F_LEN(cmd);
 		if (cmdlen > l) {
 			kprintf("ipfw: opcode %d size truncated\n",
@@ -3526,6 +3528,8 @@ ipfw_check_ioc_rule(struct ipfw_ioc_rule *rule, int size, uint32_t *rule_flags)
 			*rule_flags |= IPFW_RULE_F_STATE;
 		}
 
+		kprintf("-->opcode=%d l=%d cmdlen=%d\n",cmd->opcode,l,cmdlen);
+
 		switch (cmd->opcode) {
 		case O_NOP:
 		case O_PROBE_STATE:
@@ -3694,6 +3698,8 @@ ipfw_ctl_add_rule(struct sockopt *sopt)
 	int error;
 	
 	size = sopt->sopt_valsize;
+	kprintf("size=%zu \n",size);
+	kprintf("sizeof(*ioc_rule)=%lu \n",sizeof(*ioc_rule));
 	if (size > (sizeof(uint32_t) * IPFW_RULE_SIZE_MAX) ||
 	    size < sizeof(*ioc_rule)) {
 		return EINVAL;
@@ -3723,6 +3729,7 @@ ipfw_copy_rule(const struct ip_fw *rule, struct ipfw_ioc_rule *ioc_rule)
 	int i;
 #endif
 
+	kprintf("--ipfw_copy_rule()\n");
 	KKASSERT(rule->cpuid == IPFW_CFGCPUID);
 
 	ioc_rule->act_ofs = rule->act_ofs;
@@ -3755,7 +3762,8 @@ ipfw_copy_rule(const struct ip_fw *rule, struct ipfw_ioc_rule *ioc_rule)
 #endif
 	}
 	KASSERT(i == ncpus, ("static rule is not duplicated on every cpu"));
-
+	
+	kprintf("ioc_rule->cmd_len=%d\n",ioc_rule->cmd_len);
 	bcopy(rule->cmd, ioc_rule->cmd, ioc_rule->cmd_len * 4 /* XXX */);
 
 	return ((uint8_t *)ioc_rule + IOC_RULESIZE(ioc_rule));
@@ -3922,6 +3930,7 @@ ipfw_ctl(struct sockopt *sopt)
 
 	case IP_FW_ADD:
 		error = ipfw_ctl_add_rule(sopt);
+		kprintf("--->added\n");
 		break;
 
 	case IP_FW_DEL:
@@ -4438,6 +4447,12 @@ ipfw_init_dispatch(netmsg_t nmsg)
 			verbose_limit);
 	}
 
+	kprintf("len of default rule=%d\n",ipfw_ctx[mycpuid]->ipfw_default_rule->cmd[0].len);
+	ipfw_ctx[mycpuid]->ipfw_default_rule->cmd[0].len=LEN;
+	kprintf("updated len of default rule=%d\n",ipfw_ctx[mycpuid]->ipfw_default_rule->cmd[0].len);
+		
+
+	
 	callout_init_mp(&ipfw_timeout_h);
 	netmsg_init(&ipfw_timeout_netmsg, NULL, &netisr_adone_rport,
 		    MSGF_DROPABLE | MSGF_PRIORITY,
@@ -4543,3 +4558,4 @@ static moduledata_t ipfwmod = {
 };
 DECLARE_MODULE(ipfw, ipfwmod, SI_SUB_PROTO_END, SI_ORDER_ANY);
 MODULE_VERSION(ipfw, 1);
+
diff --git a/sys/net/ipfw/ip_fw2.h b/sys/net/ipfw/ip_fw2.h
index 8433c53..b0074cc 100644
--- a/sys/net/ipfw/ip_fw2.h
+++ b/sys/net/ipfw/ip_fw2.h
@@ -32,6 +32,24 @@
 #include <net/netisr2.h>
 #endif
 
+
+#define _INSN64
+#ifdef _INSN64
+#define SIZE_INSN 8
+#define LEN 2
+#define RESERVED 12 
+
+#else
+#define SIZE_INSN 4
+#define LEN 1
+#define RESERVED 16
+
+#endif
+
+
+
+
+
 /*
  * The kernel representation of ipfw rules is made of a list of
  * 'instructions' (for all practical purposes equivalent to BPF
@@ -153,8 +171,14 @@ typedef struct	_ipfw_insn {	/* template for instructions */
 #define	F_OR		0x40
 #define	F_LEN_MASK	0x3f
 #define	F_LEN(cmd)	((cmd)->len & F_LEN_MASK)
-
 	uint16_t	arg1;
+
+#ifdef _INSN64
+	uint8_t		module;
+	uint8_t	reserved;
+	uint16_t	arg2;
+#endif
+
 } ipfw_insn;
 
 /*
@@ -311,7 +335,7 @@ struct ip_fw {
 #define IPFW_RULE_F_INVALID	0x1
 #define IPFW_RULE_F_STATE	0x2
 
-#define RULESIZE(rule)	(sizeof(struct ip_fw) + (rule)->cmd_len * 4 - 4)
+#define RULESIZE(rule)	(sizeof(struct ip_fw) + (rule)->cmd_len * 4 - SIZE_INSN)
 
 /*
  * This structure is used as a flow mask and a flow id for various
@@ -442,7 +466,7 @@ struct ipfw_ioc_rule {
 	uint64_t	bcnt;		/* Byte counter			*/
 	uint32_t	timestamp;	/* tv_sec of last match		*/
 
-	uint8_t		reserved[16];
+	uint8_t		reserved[RESERVED];
 
 	ipfw_insn	cmd[1];		/* storage for commands		*/
 };
@@ -452,7 +476,7 @@ struct ipfw_ioc_rule {
 #define IPFW_RULE_SIZE_MAX	255	/* unit: uint32_t */
 
 #define IOC_RULESIZE(rule)	\
-	(sizeof(struct ipfw_ioc_rule) + (rule)->cmd_len * 4 - 4)
+	(sizeof(struct ipfw_ioc_rule) + (rule)->cmd_len * 4 - SIZE_INSN)
 
 struct ipfw_ioc_flowid {
 	uint16_t	type;	/* ETHERTYPE_ */
