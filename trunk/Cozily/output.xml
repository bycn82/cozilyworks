
<FileDeclaration> 
<PackageDeclaration>package 
<QualifiedName>com.cozilywork.goole
</QualifiedName>;
</PackageDeclaration>
<ImportDeclaration>import  
<QualifiedName>com.cozilyworks.nice
</QualifiedName>.*;
</ImportDeclaration>
<ImportDeclaration>import  
<QualifiedName>com.google.util.Nice
</QualifiedName>;
</ImportDeclaration>
<TypeDeclaration>
<ClassOrInterfaceDeclaration>
<ClassDeclaration>
<NormalClassDeclaration>
<Modifiers>
<AnnoOrKeywords>public 
</AnnoOrKeywords>
</Modifiers> class Example 
<ClassBody>{
<ClassBodyDeclaration>
<MemberDecl>
<FieldDeclaration>
<Modifiers>
<AnnoOrKeywords>private 
</AnnoOrKeywords>
</Modifiers> 
<Type>
<ClassOrInterfaceType>
<IdentifierArgs>java
</IdentifierArgs>.
<IdentifierArgs>sql
</IdentifierArgs>.
<IdentifierArgs>Date
</IdentifierArgs>
</ClassOrInterfaceType>
</Type> 
<VariableDeclarator>d
</VariableDeclarator>;
</FieldDeclaration>
</MemberDecl>
</ClassBodyDeclaration>
<ClassBodyDeclaration>
<MemberDecl>
<FieldDeclaration>
<Modifiers>
<AnnoOrKeywords>public 
</AnnoOrKeywords>
</Modifiers> 
<Type>
<ClassOrInterfaceType>
<IdentifierArgs>String
</IdentifierArgs>
</ClassOrInterfaceType>
</Type> 
<VariableDeclarator>nic= 
<VariableInitializer>
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>
<Creator>new 
<ClassOrInterfaceType>
<IdentifierArgs>Integer
</IdentifierArgs>
</ClassOrInterfaceType> 
<ClassCreatorRest>
<Arguments>(  )
</Arguments> 
</ClassCreatorRest>
</Creator>
</Primary>
<Selector>.toString 
<Arguments>(  )
</Arguments>
</Selector>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression>  
</Expression>
</VariableInitializer>
</VariableDeclarator>;
</FieldDeclaration>
</MemberDecl>
</ClassBodyDeclaration>
<ClassBodyDeclaration>
<MemberDecl>
<MethodDeclaration>
<Modifiers>
<AnnoOrKeywords>public 
</AnnoOrKeywords>
<AnnoOrKeywords>static 
</AnnoOrKeywords>
</Modifiers>  
<ReturnType>void
</ReturnType> main 
<FormalParameters>( 
<FormalParameterDecls>
<NormalParameterDecl>[VariableModifiers] 
<Type>
<ClassOrInterfaceType>
<IdentifierArgs>Nice
</IdentifierArgs>
</ClassOrInterfaceType>[][]
</Type> n
</NormalParameterDecl>
</FormalParameterDecls> )
</FormalParameters>throws 
<QualifiedNameList>
<QualifiedName>OK
</QualifiedName>
</QualifiedNameList>
<BlockOrSemi>
<Block>{}
</Block>
</BlockOrSemi>
</MethodDeclaration>
</MemberDecl>
</ClassBodyDeclaration>
<ClassBodyDeclaration>
<MemberDecl>
<MethodDeclaration>
<Modifiers>
<AnnoOrKeywords>public 
</AnnoOrKeywords>
</Modifiers>  
<ReturnType>void
</ReturnType> nice 
<FormalParameters>( 
<FormalParameterDecls>
<NormalParameterDecl>[VariableModifiers] 
<Type>
<ClassOrInterfaceType>
<IdentifierArgs>jis
</IdentifierArgs>
</ClassOrInterfaceType>
</Type> s
</NormalParameterDecl>
</FormalParameterDecls> )
</FormalParameters>throws 
<QualifiedNameList>
<QualifiedName>NO.Yes
</QualifiedName>
</QualifiedNameList>
<BlockOrSemi>
<Block>{
<BlockStatement>
<Statement>
<Trystatement>try 
<Block>{
<BlockStatement>
<LocalVariableDeclarationStatement>
<LocalVariableDeclaration>[VariableModifiers] 
<Type>
<ClassOrInterfaceType>
<IdentifierArgs>String
</IdentifierArgs>
</ClassOrInterfaceType>
</Type> 
<VariableDeclarator>s
</VariableDeclarator>
</LocalVariableDeclaration>;
</LocalVariableDeclarationStatement>
</BlockStatement>}
</Block> 
<Catches>
<CatchClause>catch( 
<FormalParameter>[VariableModifiers] 
<Type>
<ClassOrInterfaceType>
<IdentifierArgs>Exception
</IdentifierArgs>
</ClassOrInterfaceType>
</Type> e
</FormalParameter> ) 
<Block>{
<BlockStatement>
<Statement>
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>e.println
<IdentifierSuffix>
<Arguments>(  )
</Arguments>
</IdentifierSuffix>
</Primary>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression>  
</Expression>;
</Statement>
</BlockStatement>}
</Block>
</CatchClause>
</Catches>
</Trystatement>
</Statement>
</BlockStatement>
<BlockStatement>
<Statement>throw 
<Expression>
<ConditionalExpression>
<ConditionalOrExpression>
<ConditionalAndExpression>
<InclusiveOrExpression>
<ExclusiveOrExpression>
<AndExpression>
<EqualityExpression>
<InstanceOfExpression>
<RelationalExpression>
<ShiftExpression>
<AdditiveExpression>
<MultiplicativeExpression>
<UnaryExpression>
<UnaryExpressionNotPlusMinus>
<Primary>
<Creator>new 
<ClassOrInterfaceType>
<IdentifierArgs>NOKK
</IdentifierArgs>
</ClassOrInterfaceType> 
<ClassCreatorRest>
<Arguments>(  )
</Arguments> 
</ClassCreatorRest>
</Creator>
</Primary>
</UnaryExpressionNotPlusMinus>
</UnaryExpression>
</MultiplicativeExpression>
</AdditiveExpression>
</ShiftExpression>
</RelationalExpression>
</InstanceOfExpression>
</EqualityExpression>
</AndExpression>
</ExclusiveOrExpression>
</InclusiveOrExpression>
</ConditionalAndExpression>
</ConditionalOrExpression>
</ConditionalExpression>  
</Expression>;
</Statement>
</BlockStatement>}
</Block>
</BlockOrSemi>
</MethodDeclaration>
</MemberDecl>
</ClassBodyDeclaration>}
</ClassBody>
</NormalClassDeclaration>
</ClassDeclaration>
</ClassOrInterfaceDeclaration>
</TypeDeclaration>
</FileDeclaration>